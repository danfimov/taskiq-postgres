[project]
name = "taskiq-postgres"
version = "0.2.0"
description = "PostgreSQL integration for taskiq"
summary = "PostgreSQL integration for taskiq"
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Framework :: AsyncIO",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Topic :: System :: Networking",
    "Typing :: Typed",
    "Operating System :: OS Independent",
]
keywords = ["taskiq", "tasks", "distributed", "async", "postgresql"]
authors = [
    {name = "Anfimov Dima", email = "lovesolaristics@gmail.com"}
]
requires-python = ">=3.9,<3.14"
dependencies = [
    "taskiq>=0.11.17",
]

[project.urls]
"Bug Tracker" = "https://github.com/danfimov/taskiq-postgres/issues"
"Repository" = "https://github.com/danfimov/taskiq-postgres/"

[project.optional-dependencies]
aiopg = [
    "aiopg>=1.4.0",
]
asyncpg = [
    "asyncpg>=0.30.0",
]
psqlpy = [
    "psqlpy>=0.10.1",
]

[dependency-groups]
dev = [
    "ruff>=0.14.0",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.1.0",
    "mypy>=1.18.1",
    "asyncpg-stubs>=0.30.2",
    "mkdocs-material>=9.6.21",
    "prek>=0.2.4",
]

[build-system]
requires = ["uv_build>=0.8.14,<0.9.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-name = "taskiq_pg"

[tool.pytest.ini_options]
pythonpath = [
  "."
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "unit: marks unit tests",
    "integration: marks tests with real infrastructure env",
    "linting: marks tests as linter/static analyzers",
]

[tool.ruff]
line-length = 120
target-version = "py39"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # TODO: enable this rules
    "TRY301",
    "PLR0913",
    "D401",
    "ANN401",
    "PERF203",


    # boolean args
    "FBT001",
    "FBT002",

    # Docstrings
    "D104",  # in public package
    "D100",  # in public module

    # Conflicted rules
    "D203",  # with D211
    "D212",  # with D213
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # Docstrings
    "D103",
    "D100",

    # Strange rules about boolean args
    "FBT001",
    "FBT002",

    "S101",  # assert usage
    "S311",  # pseudo-random generators are not suitable for cryptographic purposes
]
"tests/test_linting.py" = [
    "S603",  # subprocess usage
]

[tool.ruff.lint.isort]
known-local-folder = ["taskiq_pg"]
lines-after-imports = 2

[tool.mypy]
python_version = "3.12"
modules = "taskiq_pg"
exclude_gitignore = true
platform = "linux"
follow_imports = "normal"
ignore_missing_imports = false
mypy_path = "stubs"
disallow_untyped_defs = true
warn_return_any = true
warn_unreachable = true
warn_no_return = true
warn_unused_ignores = true
warn_redundant_casts = true
